// DML //

// 1. Find all documents where first name equals to 'Sharon'
db.customers.find ({first_name:"Sharon"})

// 2. Find all documents where first name is 'Tory'
db.customers.find ({first_name:"Tory"})

// 3. Find all male information in collections
db.customers.find ({gender:"male"})

// 4. Find all documents where age is less than 40
db.customers.find ({age:{$lt:40}})

// 5. Find all documents where address city equals to 'Boston'
db.customers.find ({"address.city":"Boston"})

// 6. Find all documents where memberships equals to 'mem1'
db.customers.find ({memberships:"mem1"})

// 7. List all documents and arrange them in ascending orders by last name
db.customer.find ().sort({last_name:1})

// 8. List all documents and arrange them in descending orders by last name
db.customers.find ().sort({last_name:-1})

// 9. Count how many documents in collections customers
db.customers.find ().count()

// 10. Count how many documents in collections customers where gender equals to 'male'
db.customers.find ({gender:"male"}).count()

// 11. Find first 4 documents in collection
db.customer.find ().limit(4)

// 12. Find first 4 documents in collection and arrnage the list in ascending last name
db.customers.find ().limit(4).sort({last_name:1})

// 13. Show all customer first and last name by print "Customer Name" in front of their name, example shows below:
// 'Customer Name:John Doe'

db.customers.find().forEach (
  function(doc){
    print("Customer Name:" + doc.first_name + " " + doc.last_name)
  }
);
// or using Aggregation pipeline Stages
// Three types of aggregation process : aggregation pipeline operations, map-reduce operation, single purpose aggregation operation
db.customers.aggregate (
  [
    {
      $project:{
        full_name:["$first_name","$last_name"]
      }
    }
  ]
);

// 14. By using aggregation pipeline stages to generates all male id and balance and list documents by descending their first name
db.customers.aggregate (
  [
    { // three pipeline stages : 1. $match
      $match:{"gender":"male"}
    },
    { // 2. $sort
      $sort:{first_name:-1}
    },
    { // 3. $project
      $project:{"balance":1}
    }
  ]
);

// 15. By using aggregation pipeline stages to generates all id with their address information, wipe all address information if they do not have street name
// Hint: using $cond and if operator
db.customers.aggregate (
  [
    {
      $project:{last_name:1,
        "address.state":1,
        "address.city":1,
        "address.street":{$cond:{
          if:{$eq:["","$address.street"]},
          then:"$$REMOVE",
          else:"$address.street"
        }
      }
    }
  }
]
);

// find all customers whos age is gearter than average value
var average_age = db.customers.aggregate ([
       {$group :
         { _id: 0,
           avg_age : {$avg:"$age"}
         }
       }
     ]);

db.customers.aggregate ([
    {
      $project :
      {
        _id: 0,
        first_name: 1,
        last_name: 1,
        age: 1,
      Greaterthanaverage_age :{
      $cond: {if: {$gte: ["$age",35]}, then:"yes", else:"no"}
      }
    }
  }
  ]);


// 16. By using aggregation pipeline to generates all id with who has balance greater than 100 and less than 500 using 'and' operator
db.customers.aggregate (
	[
		{
			$project:
			{
				first_name:1,
				last_name:1,
				gender:1,
				"address.city":1,
				result:{ $and:[{ $gt:["$balance",100]},{ $lt: ["$balance",500]}]}
			}
		}
	]
);

// 17. By using aggregation pipeline to genrates average balance and age by city
db.customers.aggregate (
	[
	{
		$group:
		{
			_id: "$address.city",
			avg_Amount: { $avg: "$balance" },
			avg_age: { $avg: "$age" }
		}
	}
	]
);

// or
db.customers.aggregate (
	[
		{
			$project : {
				"address.city":1,
				avg_Amount : { $avg: "$balance" },
				avg_age: { $avg: "$age" }
			}
		}
	]
);

// 18. By using aggregation pipeline to generates each customers full address
db.customers.aggregate (
	[
		{
			$project: {Full_Address: {$concat: ["$address.street",",","$address.city",",","$address.state"]}}
		}
	]
);

// 28. Use aggregate pipeline and substr operator to separate the street into street number and street Name
db.customers.aggregate (
	[
		{
			$project : {
				first_name :1,
				last_name :1,
				"street number":{ $substr: [ "$address.street",0,3]},
				"street name": { $substr: [ "$address.street",3,-1]}
			}
		}
	]
);

// or (Hint: substr operator statrs with the character at the specified byte index (zero-based))
db.customers.aggregate (
	[
		{
			$project : {
				"address.street":1,
				"street Number" : { $substrBytes:["$address.street",0,3]},
				"Street Name" : { $substrBytes:["$address.street",3,6]},
				"Suffix" : {$substrBytes:["$address.street",10,2]}
			}
		}
	]
);

// 29. Use aggregate pipeline and subtract operator to calculate time different between now and customers $birthday
db.customers.aggregate (
	[
		{
			$project : { first_name:1, last_name:1, datedifference : { $subtract : [ new Date(), '$birthday']}}
		}
	]
);

// or
db.customers.aggregate([
    {$project: {
        first_name: 1, last_name:1, birthday:1,
        diff_days: {
          $divide: [
            { $subtract:
              [ new Date(), "$birthday"]
            } , 1000 * 60 * 60 * 24
          ]
        }
      }
    }
  ]);


  Extra Cerdit:

//  1. Use aggregate pipeline with map operator to calculate integer balance for each customers
  db.customers.aggregate (
  	[
  		{
  			$project : {
  				first_name: "$first_name",
  				last_name: "$last_name",
  				integerbalance:
  				{ $map:
  				{
  					input: "$balance",
  					as: "integerbalance",
  					in: { $trunc: "$$integerbalance" }
  				}}
  			}
  		}
  	]
  );

  // 2. Follow the above query and add 50.00 to each integerbalance
  db.customers.aggregate (
  	[
  		{
  			$project : {
  				first_name: "$first_name",
  				last_name: "$last_name",
  				integerbalance:
  				{ $map:
  				{
  					input: "$balance",
  					as: "integerbalance",
  					in: { $trunc: "$$integerbalance"}
  				}}
  			}
  		},
  		{
  			$project : {
  				first_name: "$first_name",
  				last_name: "$last_name",
  				"total integer balance":
  				{ $map:
  					{
  						input:"$integerbalance",
  						as:"integerbalance",
  						in: { $add: ["$$integerbalance", 50.00]}
  					}
  				}
  			}
  		}
  	]
  );

// 3. Use aggregate pipeline with date and time functions to extract year, month, day, hour, minutes, seconds, milliseconds, dayofweek, dayofyear and week number of their birthday
  db.customers.aggregate (
  	[
  		{
  			$project :
  			{
  				year : { $year: "$birthday" },
  				month : { $month: "$birthday" },
  				day : { $dayOfMonth: "$birthday" },
  				hour : { $hour: "$birthday" },
  				minutes : {$minute: "$birthday" },
  				seconds : {$second: "$birthday" },
  				milliseconds : { $millisecond: "$birthday" },
  				dayOfWeek : { $dayOfWeek: "$birthday" },
  				dayOfYear : { $dayOfYear: "$birthday" },
  				week : { $week: "$birthday"}
  			}
  		}
  	]
  );
